/* Copyright (c) 2024 CERN */
/* SPDX-License-Identifier: Apache-2.0 */

OUTPUT_FORMAT("elf32-littleriscv")
OUTPUT_ARCH(riscv)

ENTRY(_entry)

MEMORY {
{% for m in mems %}
    {{ m.parent.inst_name }} ({{ m|getSwAcc }}): ORIGIN = 0x{{ '%08x' % m.absolute_address }}, LENGTH = 0x{{ '%08x' % m.size }}
{% endfor %}
}

{# {% set stack_mem = mems|getStackMem %}
{% set heap_mem = mems|getHeapMem %} #}
{% set prog_mem = mems|getProgramMem %}
{% set boot_mem = mems|getBootMem %}
{% set data_mem = mems|getDataMem %}
{% set bss_mem = mems|getBssMem %}

{% for reg in regs %}
PROVIDE({{reg.inst_name}} = 0x{{ '%08x' % reg.absolute_address }});
{% endfor %}

SECTIONS
{
  /* we want a fixed boot point */
  PROVIDE(__boot_address = ORIGIN( {{ boot_mem.parent.inst_name }} ));

  {% if boot_mem is not none %}
  .bootloader : {
      *bootloader.S.o*(*);
      *bootloader.cpp.o*(*);
      . = ALIGN(4);
  } > {{ boot_mem.parent.inst_name }}
  {% endif %}

  /* we want a fixed entry point */
  PROVIDE(__entry_address = ORIGIN( {{ prog_mem.parent.inst_name }} ) + 0x180);

  /* stack and heap related settings */
  __stack_size = DEFINED(__stack_size) ? __stack_size : 0x800;
  PROVIDE(__stack_size = __stack_size);
  __heap_size = DEFINED(__heap_size) ? __heap_size : 0x800;

  /***************************************/
  /* PROGRAM / TEXT / READ-ONLY SECTIONS */
  /***************************************/

  /* interrupt vectors */
  .vectors (ORIGIN( {{ prog_mem.parent.inst_name }} )):
  {
    PROVIDE(__vector_start = .);
    KEEP(*(.vectors));
  } > {{ prog_mem.parent.inst_name }}

  /* crt0 init code */
  .init (__entry_address):
  {
    /* The _enter symbol is placed in the .text.entry section
     * and must be placed at the beginning of the program */
    KEEP (*(.text.entry))
    KEEP (*(SORT_NONE(.init)))
    /* Align on 4 bytes to avoid errors during hex generation */
    FILL(0xDEAD)
    . = ALIGN(4);
  } > {{ prog_mem.parent.inst_name }}

  /* not used by RISC-V */
  .fini :
  {
    KEEP (*(SORT_NONE(.fini)))
    /* Align on 4 bytes to avoid errors during hex generation */
    FILL(0xDEAD)
    . = ALIGN(4);
  } > {{ prog_mem.parent.inst_name }}

  .text :
  {
    *(.text.unlikely .text.unlikely.*)
    *(.text.startup .text.startup.*)
    *(.text .text.*)
    *(.gnu.linkonce.t.*)
  } > {{ prog_mem.parent.inst_name }}

  /*****************/
  /* DATA SECTIONS */
  /*****************/

  /* initialization and termination routines */
  .preinit_array : ALIGN(8)
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  } > {{ data_mem.parent.inst_name }}

  .init_array : ALIGN(8)
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
    KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
    PROVIDE_HIDDEN (__init_array_end = .);
  } > {{ data_mem.parent.inst_name }}

  .fini_array : ALIGN(8)
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
    KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
    PROVIDE_HIDDEN (__fini_array_end = .);
  } > {{ data_mem.parent.inst_name }}

  .ctors :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in. */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*crtbegin?.o(.ctors))
    /* We don't want to include the .ctor section from
       the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  } > {{ data_mem.parent.inst_name }}

  .dtors          :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*crtbegin?.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
  } > {{ data_mem.parent.inst_name }}

  .rodata : {
    *(.rdata)
    *(.rodata .rodata.*)
    *(.gnu.linkonce.r.*)
    . = ALIGN(8);
    *(.srodata.cst16)
    *(.srodata.cst8)
    *(.srodata.cst4)
    *(.srodata.cst2)
    *(.srodata .srodata.*)
  } > {{ data_mem.parent.inst_name }}

  /* data sections for initalized data */
  .data : ALIGN(8)
  {
    *(.data .data.*)
    *(.gnu.linkonce.d.*)
    SORT(CONSTRUCTORS)
    /* The compiler uses this to access data in the .sdata, .data, .sbss and .bss
       sections with fewer instructions (relaxation). This reduces code size.
     */
    PROVIDE( __global_pointer$ = . + 0x800 );
    *(.sdata .sdata.*)
    *(.gnu.linkonce.s.*)
  } > {{ data_mem.parent.inst_name }}

  /* Thread Local Storage sections */
  .tdata : ALIGN(8)
  {
    PROVIDE_HIDDEN ( __tdata_start = . );
    *(.tdata .tdata.*)
    *(.gnu.linkonce.td.*)
  } > {{ data_mem.parent.inst_name }}

  PROVIDE ( __edata = . );

  /* zero initialized sections */
  .tbss : ALIGN(8)
  {
    PROVIDE( __bss_start = . );
    *(.tbss .tbss.* .gnu.linkonce.tb.*)
    *(.tcommon)
  } > {{ data_mem.parent.inst_name }}

  .bss (NOLOAD): ALIGN(8) {
    *(.sbss*)
    *(.gnu.linkonce.sb.*)
    *(.bss .bss.*)
    *(.gnu.linkonce.b.*)
    *(COMMON)
    PROVIDE( __bss_end = . );
  } > {{ data_mem.parent.inst_name }}

  /* second level sbss and sdata, not needed for now */
  /* .sdata2 : {*(.sdata2 .sdata2.* .gnu.linkonce.s2.*)} */
  /* .sbss2  : {*(.sbss2 .sbss2.* .gnu.linkonce.sb2.*) } */

  .stack (NOLOAD) : ALIGN(16) /* This is a requirement of the ABI */
  {
    PROVIDE( __stack_start = . );
    . = __stack_size;
    PROVIDE( _sp = . );
    PROVIDE( __stack_end = . );
  } > {{ data_mem.parent.inst_name }}

  .heap (NOLOAD) : ALIGN(8)
  {
    PROVIDE( __end = . );
    PROVIDE( __heap_start = . );
    . = __heap_size;
    PROVIDE( __heap_end = . );
  } > {{ data_mem.parent.inst_name }}

  /******************/
  /* DEBUG SECTIONS */
  /******************/

  {% if debug %}
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) } > {{ data_mem.parent.inst_name }}
  .stabstr       0 : { *(.stabstr) } > {{ data_mem.parent.inst_name }}
  .stab.excl     0 : { *(.stab.excl) } > {{ data_mem.parent.inst_name }}
  .stab.exclstr  0 : { *(.stab.exclstr) } > {{ data_mem.parent.inst_name }}
  .stab.index    0 : { *(.stab.index) } > {{ data_mem.parent.inst_name }}
  .stab.indexstr 0 : { *(.stab.indexstr) } > {{ data_mem.parent.inst_name }}
  .comment       0 : { *(.comment) } > {{ data_mem.parent.inst_name }}
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) } > {{ data_mem.parent.inst_name }}
  .line           0 : { *(.line) } > {{ data_mem.parent.inst_name }}
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) } > {{ data_mem.parent.inst_name }}
  .debug_sfnames  0 : { *(.debug_sfnames) } > {{ data_mem.parent.inst_name }}
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) } > {{ data_mem.parent.inst_name }}
  .debug_pubnames 0 : { *(.debug_pubnames) } > {{ data_mem.parent.inst_name }}
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) } > {{ data_mem.parent.inst_name }}
  .debug_abbrev   0 : { *(.debug_abbrev) } > {{ data_mem.parent.inst_name }}
  .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) } > {{ data_mem.parent.inst_name }}
  .debug_frame    0 : { *(.debug_frame) } > {{ data_mem.parent.inst_name }}
  .debug_str      0 : { *(.debug_str) } > {{ data_mem.parent.inst_name }}
  .debug_loc      0 : { *(.debug_loc) } > {{ data_mem.parent.inst_name }}
  .debug_macinfo  0 : { *(.debug_macinfo) } > {{ data_mem.parent.inst_name }}
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) } > {{ data_mem.parent.inst_name }}
  .debug_funcnames 0 : { *(.debug_funcnames) } > {{ data_mem.parent.inst_name }}
  .debug_typenames 0 : { *(.debug_typenames) } > {{ data_mem.parent.inst_name }}
  .debug_varnames  0 : { *(.debug_varnames) } > {{ data_mem.parent.inst_name }}
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) } > {{ data_mem.parent.inst_name }}
  .debug_ranges   0 : { *(.debug_ranges) } > {{ data_mem.parent.inst_name }}
  /* DWARF Extension.  */
  .debug_macro    0 : { *(.debug_macro) } > {{ data_mem.parent.inst_name }}
  .debug_addr     0 : { *(.debug_addr) } > {{ data_mem.parent.inst_name }}
  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) } > {{ data_mem.parent.inst_name }}
  {% endif %}
  /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) *(*) } > {{ data_mem.parent.inst_name }}

};

