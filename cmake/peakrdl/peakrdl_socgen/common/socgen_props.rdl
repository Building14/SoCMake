`ifndef COMMON_RDL
`define COMMON_RDL

// input or output property is needed to be detected by socgen
property output {
    type = boolean;
    component = signal;
};

property input {
    type = boolean;
    component = signal;
};

property clock {
    type = boolean;
    component = signal;
};

// reset property is a a built-in SystemRDL property but not for signals
property reset_signal {
    type = boolean;
    component = signal;
};

property datatype {
    type = string;
    component = signal;
};

// For IPs that have a regblock_wrap target, bind this property
// to signals that are only used within the wrapper and are not
// ports of the core logic.
property wrap_only {
    type = boolean;
    default=true;
    component = signal;
};

property master {
    type = boolean;
    component = addrmap;
};

property subsystem {
    type = boolean;
    component = addrmap;
};

property interconnect {
    type = boolean;
    component = addrmap;
};

property adapter {
    type = boolean;
    component = addrmap;
};

property connections {
    type = string[];
    component = addrmap;
};

property path {
    type = string;
    component = signal;
};

struct intc {
    string name;
    string slv_ports[];
    string mst_ports[];
};

property intc_l {
    type = intc[];
    component = addrmap;
};

// desc = "Slave select signal, should not be shared between slaves";
property ss {
    type = boolean;
    component = signal;
};

property interconnect_name {
    type = string;
    component = addrmap;
};

property mosi {
    type = boolean;
    component = signal;
};

property miso {
    type = boolean;
    component = signal;
};

signal clk {
    input;
    clock;
    signalwidth=1;
    desc = "Input clock";
};

signal rstn {
    input;
    reset_signal;
    signalwidth=1;
    desc = "Input reset, active low";
    activelow = true;
};

signal rst {
    input;
    reset_signal;
    signalwidth=1;
    desc = "Input reset, active high";
    activehigh = true;
};

property intf {
    type = boolean;
    component = addrmap;
};

property n_array {
    type = longint unsigned;
    component = addrmap;
};

enum Modport {
    slave   = 0;
    master  = 1;
};

struct base_intf{
    Modport modport;
    string prefix;
    boolean cap;
};

struct data_intf : base_intf {
    longint unsigned DATA_WIDTH;

};

struct addr_intf : data_intf {
    longint unsigned ADDR_WIDTH;
};

property intf_inst{
    component = addrmap;
    type = base_intf;
};

property ifports {
    component = addrmap;
    type = base_intf[];
};

`endif
