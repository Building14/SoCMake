(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[98],{6991:(e,i,n)=>{"use strict";n.r(i),n.d(i,{assets:()=>p,cmakelists:()=>h,contentTitle:()=>a,default:()=>x,frontMatter:()=>l,graph:()=>c,metadata:()=>d,toc:()=>m});var s=n(4848),t=n(8453),r=n(4782),o=n(1432);const l={sidebar_position:2},a="Hierarchical design",d={id:"examples/linking_ips",title:"Hierarchical design",description:"SoCMake promotes hierarchical design, by organizing IP blocks into IP libraries, we can easily reuse IP blocks into different designs.",source:"@site/docs/examples/linking_ips.mdx",sourceDirName:"examples",slug:"/examples/linking_ips",permalink:"/SoCMake/docs/examples/linking_ips",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/linking_ips.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Simulation",permalink:"/SoCMake/docs/examples/simulation"},next:{title:"Verilator C++ testbench",permalink:"/SoCMake/docs/examples/verilator"}},p={},c=n(3443).A,h=n(7958).A,m=[{value:"Graph",id:"graph",level:2},{value:"CMakeLists.txt",id:"cmakeliststxt",level:2}];function g(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"hierarchical-design",children:"Hierarchical design"}),"\n","\n","\n",(0,s.jsx)(i.p,{children:"SoCMake promotes hierarchical design, by organizing IP blocks into IP libraries, we can easily reuse IP blocks into different designs."}),"\n",(0,s.jsxs)(i.p,{children:["Let's try to create a bit more complex example to demonstrate how to link different libraries together.\nImagine the following graph.",(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["We have a ",(0,s.jsx)(i.code,{children:"top"})," IP that instantiates some primitives: ",(0,s.jsx)(i.code,{children:"prim10"})," and ",(0,s.jsx)(i.code,{children:"prim11"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"prim10"})," depends on ",(0,s.jsx)(i.code,{children:"prim00"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"prim11"})," depends on ",(0,s.jsx)(i.code,{children:"prim00"})," and ",(0,s.jsx)(i.code,{children:"prim01"}),"."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"graph",children:"Graph"}),"\n",(0,s.jsx)(r.i,{dot:c}),"\n",(0,s.jsx)(i.h2,{id:"cmakeliststxt",children:"CMakeLists.txt"}),"\n",(0,s.jsxs)(i.p,{children:["We can create this hierarchy with the following ",(0,s.jsx)(i.code,{children:"CMakeLists.txt"})]}),"\n",(0,s.jsx)(o.A,{language:"verilog",title:"CMakeLists.txt",showLineNumbers:!0,children:h}),"\n",(0,s.jsx)(i.admonition,{type:"warning",children:(0,s.jsxs)(i.p,{children:["We can see in the highlighted lines ",(0,s.jsx)(i.code,{children:"add_ip()"})," function calls, that we are adding IPs without ",(0,s.jsx)(i.code,{children:"VENDOR"}),", ",(0,s.jsx)(i.code,{children:"LIBRARY"}),", ",(0,s.jsx)(i.code,{children:"VERSION"})," format, instead we only pass the ",(0,s.jsx)(i.code,{children:"NAME"}),".\nThis is not recommended, and we set ",(0,s.jsx)(i.code,{children:"SOCMAKE_NOWARN_VLNV"})," variable to true, so we don't get a warning."]})}),"\n",(0,s.jsxs)(i.p,{children:["Finally we are describing our dependencies with ",(0,s.jsx)(i.code,{children:"ip_link()"})," function.\nThe ",(0,s.jsx)(i.code,{children:"ip_link()"})," function as first positional argument takes the ",(0,s.jsx)(i.code,{children:"Dependent"})," library, and the rest of the arguments are its ",(0,s.jsx)(i.code,{children:"Dependencies"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["We can get the ",(0,s.jsx)(i.code,{children:"Source Filesets"})," by calling ",(0,s.jsx)(i.code,{children:"get_ip_sources()"})," on the IP library.\nFirst argument is the variable where to save the list of sources, second one is the name of the IP library and the last one is the file type."]}),"\n",(0,s.jsx)(i.p,{children:"We are finally printing the list of sources to stdout in the last 2 lines."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-raw",children:"-- CPM: Adding package SoCMake@ (verilator_system_path)\nV_SOURCES:\n    ..../linking_ips/prim00.v\n    ..../linking_ips/prim01.v\n    ..../linking_ips/prim10.v\n    ..../linking_ips/prim11.v\n    ..../linking_ips/top.v\n-- Configuring done\n-- Generating done\n-- Build files have been written to: ..../linking_ips/build\n"})}),"\n",(0,s.jsx)(i.admonition,{type:"caution",children:(0,s.jsxs)(i.p,{children:["CMake property populated in this case will be ",(0,s.jsx)(i.code,{children:"VERILOG_SOURCES"}),", the library ",(0,s.jsx)(i.code,{children:"top"})," will only hold its own ",(0,s.jsx)(i.code,{children:"VERILOG_SOURCES"})," in this case ",(0,s.jsx)(i.code,{children:"top.v"}),", so if you use ",(0,s.jsx)(i.code,{children:"get_target_property(V_SOURCES top VERILOG_SOURCES)"})," you will only get one file, if you want to get the files of all IPs use ",(0,s.jsx)(i.code,{children:"get_ip_sources()"})]})}),"\n",(0,s.jsx)(i.p,{children:"We can see that the order of the printed files is respected and that the lowest hierarchy IPs files are first."}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsxs)(i.p,{children:["Running ",(0,s.jsx)(i.code,{children:"make graphviz"})," on the previous example will generate the graph shown above"]})}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsx)(i.p,{children:"It is recommended to keep libraries in separate directories and CMakeLists.txt files, and ideally on their own GIT repositories."})})]})}function x(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},7958:(e,i,n)=>{"use strict";n.d(i,{A:()=>s});const s='cmake_minimum_required(VERSION 3.25)\nproject(example \n    LANGUAGES NONE\n    VERSION 0.0.1)\n\ninclude("deps/deps.cmake")\n# highlight-next-line\nset(SOCMAKE_NOWARN_VLNV TRUE) # Do not warn incomplete VLNV format\n\n## Define IP TOP\n# highlight-next-line\nadd_ip(top)\nip_sources(top VERILOG\n    ${PROJECT_SOURCE_DIR}/top.v\n    )\n\n# Define IP prim10\n# highlight-next-line\nadd_ip(prim10)\nip_sources(prim10 VERILOG\n    ${PROJECT_SOURCE_DIR}/prim10.v\n    )\n\n## Define IP prim11\n# highlight-next-line\nadd_ip(prim11)\nip_sources(prim11 VERILOG\n    ${PROJECT_SOURCE_DIR}/prim11.v\n    )\n\n## Define IP prim00\n# highlight-next-line\nadd_ip(prim00)\nip_sources(prim00 VERILOG\n    ${PROJECT_SOURCE_DIR}/prim00.v\n    )\n\n## Define IP prim01\nadd_ip(prim01)\nip_sources(prim01 VERILOG\n    ${PROJECT_SOURCE_DIR}/prim01.v\n    )\n\n# highlight-start\nip_link(top prim10 prim11)\nip_link(prim10 prim00)\nip_link(prim11 prim00 prim01)\n# highlight-end\n\n# Get Verilog sources\nget_ip_sources(V_SOURCES top VERILOG)\n# Just print sources\nstring(REPLACE ";" "\\n    " V_SOURCES "${V_SOURCES}")\nmessage("V_SOURCES: \\n    ${V_SOURCES}")\n'},3443:(e,i,n)=>{"use strict";n.d(i,{A:()=>s});const s='digraph "example" {\nnode [\n  fontsize = "12"\n];\n\n\n\n    "node3" [ label = "prim00", shape = pentagon ];\n    "node4" [ label = "prim01", shape = pentagon ];\n    "node5" [ label = "prim10", shape = pentagon ];\n    "node5" -> "node3" [ style = dashed ] // prim10 -> prim00\n    "node6" [ label = "prim11", shape = pentagon ];\n    "node6" -> "node3" [ style = dashed ] // prim11 -> prim00\n    "node6" -> "node4" [ style = dashed ] // prim11 -> prim01\n    "node7" [ label = "top", shape = pentagon ];\n    "node7" -> "node5" [ style = dashed ] // top -> prim10\n    "node7" -> "node6" [ style = dashed ] // top -> prim11\n}\n'},2938:()=>{},6120:()=>{},6984:()=>{}}]);